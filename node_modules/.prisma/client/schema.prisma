// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Developer{
    id                String            @id @unique()
    name              String
    email             String

    projects          Project[]
}


model Project{
    id                Int              @id @default(autoincrement())
    name              String
    
    accessToken       String

    developerID       String
    developer         Developer        @relation(fields: [developerID], references: [id], onDelete: Cascade)

    keys              AccessKey[]
    users             User[]
    groups            Group[]
    friends           Friend[]

    @@unique([name, developerID])
}

model AccessKey{
    key               String            @id @unique
    name              String  
    enabled           Boolean           @default(false)

    projectID         Int
    project           Project           @relation(fields: [projectID], references: [id], onDelete: Cascade)
}

model User{
    id              String        @id @unique
    name            String
    email           String        @unique
    password        String

    organization      String?
    
    projectID         Int
    project           Project     @relation(fields: [projectID], references: [id], onDelete: Cascade)

    requester       Friend[]      @relation("requester")
    acceptor        Friend[]      @relation("acceptor")

    notifications   Notification[]


    sentChats       Chat[]
    createdGroups   Group[]         
    members         Member[]
}

model Chat{
    id              Int           @id @default(autoincrement())
    message         String
    created         DateTime      @default(now())
    delivered       Boolean       @default(false)

    senderID        String
    sender          User          @relation(fields: [senderID], references: [id])

    ownerID         String

    reply           Chat[]            @relation("reference")
    referenceID     Int?
    reference       Chat?             @relation("reference", fields: [referenceID], references: [id], onDelete: SetNull)
}

model Friend{
    id              String        @id

    requesterID     String
    requester       User          @relation("requester", fields: [requesterID], references: [id])

    acceptorID      String
    acceptor        User          @relation("acceptor", fields: [acceptorID], references: [id])

    accepted        Boolean       @default(false)

    organization    String?

    projectID       Int
    project         Project            @relation(fields: [projectID], references: [id])

    @@unique([requesterID, acceptorID])
}

model Group {
    id              String              @id @unique
    name            String
    last            DateTime            @default(now())
    attachment      String?

    creatorID       String
    creator         User                @relation(fields: [creatorID], references: [id], onDelete: NoAction)

    organization    String?

    projectID       Int
    project         Project             @relation(fields: [projectID], references: [id])

    members         Member[]
    notifications   Notification[]
}

model Member {
    user              User              @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID            String

    group             Group             @relation(fields: [groupID], references: [id], onDelete: Cascade)
    groupID           String

    joined            DateTime          @default(now())
    role              String            @default("member")

    accepted          Boolean           @default(false)

    @@id([userID, groupID])
}

model Notification{
    id                Int               @id @default(autoincrement())
    message           String?
    alert             String  
    created           DateTime          @default(now())
    received          Boolean           @default(false)

    groupID           String?
    group             Group?            @relation(fields: [groupID], references: [id], onDelete: SetNull)

    reciecver         User              @relation(fields: [recieverID], references: [id], onDelete: Cascade)
    recieverID        String
}